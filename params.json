{"name":"Python-arduino-command-api","tagline":"A Python library for communicating with Arduino microcontroller boards","body":"# Python Arduino Command API\r\n\r\nThe Python Arduino Command API is a light-weight Python library for \r\ncommunicating with [Arduino microcontroller boards](http://www.arduino.cc/) from a connected computer using \r\nstandard serial IO, either physically \r\nor wirelessly. It is written using a custom protocol, similar to [Firmata](http://firmata.org/wiki/Main_Page). \r\n\r\nThis allows a user to quickly protoype programs for Arduino using Python code, or to \r\nsimply read/control/troubleshoot/experiment\r\nwith harware connected to an Arduino board without ever having to recompile and reload sketches to the board itself.\r\n\r\nMethod names within the Python Arduino Command API are designed to be as close \r\nas possible to their Arduino programming language counterparts\r\n\r\n## Simple usage example (LED blink)\r\n```python\r\n#!/usr/bin/env python\r\n\"\"\"\r\n Blinks an LED on digital pin 13\r\n in 1 second intervals\r\n\"\"\"\r\n\r\nfrom Arduino import Arduino\r\nimport time\r\n\r\nboard = Arduino('9600') #plugged in via USB, serial com at rate 9600\r\n\r\nwhile True:\r\n    board.digitalWrite(13, \"LOW\")\r\n    time.sleep(1)\r\n    board.digitalWrite(13, \"HIGH\")\r\n    time.sleep(1)\r\n```\r\n\r\n## Requirements:\r\n- [Python](http://python.org/) 2.3 or higher (Python 3.x not yet tested, but would probably work)\r\n- [pyserial](http://pyserial.sourceforge.net/) 2.6 or higher\r\n- Any [Arduino compatible microcontroller](https://www.sparkfun.com/categories/242) with at least 14KB of flash memory \r\n\r\n## Setup:\r\n1. Run `setup.py build install` to install the library\r\n2. Verify that your Arduino board communicates at the baud rate specified in the \r\n`setup()` function (line 348) in `prototype.ino`. Change it there if necessary.\r\n3. Load the `prototype.ino` sketch onto your Arduino board, using the Arduino IDE.\r\n4. Set up some kind of serial I/O communication between the Arduino board and your computer (via physical USB cable, \r\nbluetooth, xbee, etc + associated drivers)\r\n5. Add `from Arduino import Arduino` into your python script to communicate with your Arduino\r\n\r\nFor a collection of examples, see `examples.py`. This file contains methods which replicate\r\nthe functionality of many Arduino demo sketches. \r\n\r\n## Testing:\r\nThe `tests` directory contains some basic tests for the library. Extensive code coverage is a bit difficult to expect for every release, since a positive test involves actually\r\nconnecting and issuing commands to a live Arduino, hosting any hardware\r\nrequired to test a particular function. But a core of basic communication tests\r\nshould at least be maintained here and used before merging into the `master` branch.\r\n\r\nAfter installation, the interactive tests can be run from the source directory:\r\n```bash\r\n$ python tests/test_main.py\r\n```\r\n\r\nAutomated tests can be run from the source directory with:\r\n```bash\r\n$ python tests/test_arduino.py\r\n```\r\n\r\n## Classes\r\n- `Arduino(baud)` - Set up communication with currently connected and powered \r\nArduino. \r\n\r\n```python\r\nboard = Arduino(\"9600\") #Example\r\n```\r\n\r\nThe device name / COM port of the connected Arduino will be auto-detected. \r\nIf there are more than one Arduino boards connected,\r\nthe desired COM port can be also be passed as an optional argument:\r\n\r\n```python\r\nboard = Arduino(\"9600\", port = \"COM3\") #Windows example\r\n```\r\n```python\r\nboard = Arduino(\"9600\", port = \"/dev/tty.usbmodemfa141\") #OSX example\r\n```\r\n\r\nA time-out for reading from the Arduino can also be specified as an optional \r\nargument:\r\n\r\n```python\r\nboard = Arduino(\"9600\", timeout = 2) #Serial reading functions will \r\n#wait for no more than 2 seconds\r\n```\r\n\r\n## Methods\r\n\r\n**Digital I/O**\r\n\r\n- `Arduino.digitalWrite(pin_number, state)` turn digital pin on/off\r\n- `Arduino.digitalRead(pin_number)` read state of a digital pin\r\n\r\n```python\r\n#Digital read / write example\r\nboard.digitalWrite(13, \"HIGH\") #Set digital pin 13 voltage\r\nstate_1 = board.digitalRead(13) #Will return integer 1\r\nboard.digitalWrite(13, \"LOW\") #Set digital pin 13 voltage\r\nstate_2 = board.digitalRead(13) #Will return integer 0\r\n```\r\n\r\n- `Arduino.pinMode(pin_number, io_mode)` set pin I/O mode\r\n- `Arduino.pulseIn(pin_number, state)` measures a pulse  \r\n- `Arduino.pulseIn_set(pin_number, state)` measures a pulse, with preconditioning\r\n\r\n```python\r\n#Digital mode / pulse example\r\nboard.pinMode(7, \"INPUT\") #Set digital pin 7 mode to INPUT\r\nduration = board.pulseIn(7, \"HIGH\") #Return pulse width measurement on pin 7\r\n```\r\n\r\n**Analog I/O**\r\n\r\n- `Arduino.analogRead(pin_number)` returns the analog value\r\n- `Arduino.analogWrite(pin_number, value)` sets the analog value\r\n\r\n```python\r\n#Analog I/O examples\r\nval=board.analogRead(5) #Read value on analog pin 5 (integer 0 to 1023)\r\nval = val / 4 # scale to 0 - 255\r\nboard.analogWrite(11) #Set analog value (PWM) based on analog measurement\r\n```\r\n\r\n**Shift Register**\r\n\r\n- `Arduino.shiftIn(dataPin, clockPin, bitOrder)` shift a byte in and returns it\r\n- `Arduino.shiftOut(dataPin, clockPin, bitOrder, value)` shift the given byte out\r\n\r\n`bitOrder` should be either `\"MSBFIRST\"` or `\"LSBFIRST\"`\r\n\r\n**Servo Library Functionality**\r\nSupport is included for up to 8 servos. \r\n\r\n- `Arduino.Servos.attach(pin, min = 544, max = 2400)` Create servo instance. Only 8 servos can be used at one time. \r\n- `Arduino.Servos.read(pin)` Returns the angle of the servo attached to the specified pin\r\n- `Arduino.Servos.write(pin, angle)` Move an attached servo on a pin to a specified angle\r\n- `Arduino.Servos.writeMicroseconds(pin, uS)` Write a value in microseconds to the servo on a specified pin\r\n- `Arduino.Servos.detach(pin)` Detaches the servo on the specified pin\r\n\r\n```python\r\n#Servo example\r\nboard.Servos.attach(9) #declare servo on pin 9\r\nboard.Servos.write(9, 0) #move servo on pin 9 to 0 degrees\r\nprint board.Servos.read(9) # should be 0\r\nboard.Servos.detach(9) #free pin 9\r\n```\r\n\r\n**Software Serial Functionality**\r\n\r\n- `Arduino.SoftwareSerial.begin(ss_rxPin,ss_txPin,ss_device_baud)` initialize software serial device on \r\nspecified pins. \r\nOnly one sofware serial device can be used at a time. Existing software serial instance will \r\nbe be overwritten by calling this method, both in Python and on the arduino board.\r\n- `Arduino.SoftwareSerial.write(data)` send data using the arduino 'write' function to the existing software \r\nserial connection.\r\n- `Arduino.SoftwareSerial.read()` returns one byte from the existing software serial connection\r\n\r\n```python\r\n#Software serial example\r\nboard.SoftwareSerial.begin(0,7,\"19200\") # Start software serial for transmit only (tx on pin 7)\r\nboard.SoftwareSerial.write(\" test \") #Send some data \r\nresponse_char = board.SoftwareSerial.read() #read response character\r\n```\r\n\r\n**Misc**\r\n\r\n- `Arduino.close()` closes serial connection to the Arduino.\r\n\r\n## To-do list:\r\n- Expand software serial functionality (`print()` and `println()`)\r\n- Add simple reset functionality that zeros out all pin values\r\n- Add I2C / TWI function support (Arduino `Wire.h` commands)\r\n- Include a wizard which generates 'prototype.ino' with selected serial baud rate and Arduino function support \r\n(to help reduce memory requirements).\r\n- Multi-serial support for Arduino mega (`Serial1.read()`, etc)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}